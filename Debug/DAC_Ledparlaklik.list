
DAC_Ledparlaklik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000062c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007b4  080007bc  000107bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080007b4  080007b4  000107b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080007b8  080007b8  000107b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000107bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000107bc  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000107bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002468  00000000  00000000  000107ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000008b5  00000000  00000000  00012c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000398  00000000  00000000  00013510  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000330  00000000  00000000  000138a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000013c1  00000000  00000000  00013bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001012  00000000  00000000  00014f99  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00015fab  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000e3c  00000000  00000000  00016028  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00016e64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800079c 	.word	0x0800079c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	0800079c 	.word	0x0800079c

080001c8 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
 80001d6:	2300      	movs	r3, #0
 80001d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 80001da:	4b14      	ldr	r3, [pc, #80]	; (800022c <DAC_Init+0x64>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80001e0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	fa02 f303 	lsl.w	r3, r2, r3
 80001ea:	43db      	mvns	r3, r3
 80001ec:	68fa      	ldr	r2, [r7, #12]
 80001ee:	4013      	ands	r3, r2
 80001f0:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000200:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_OutputBuffer);
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000206:	4313      	orrs	r3, r2
 8000208:	60bb      	str	r3, [r7, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 800020a:	68ba      	ldr	r2, [r7, #8]
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	4313      	orrs	r3, r2
 8000216:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000218:	4a04      	ldr	r2, [pc, #16]	; (800022c <DAC_Init+0x64>)
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	6013      	str	r3, [r2, #0]
}
 800021e:	bf00      	nop
 8000220:	3714      	adds	r7, #20
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40007400 	.word	0x40007400

08000230 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	460b      	mov	r3, r1
 800023a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800023c:	78fb      	ldrb	r3, [r7, #3]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d009      	beq.n	8000256 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000242:	490d      	ldr	r1, [pc, #52]	; (8000278 <DAC_Cmd+0x48>)
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <DAC_Cmd+0x48>)
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	2001      	movs	r0, #1
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	fa00 f303 	lsl.w	r3, r0, r3
 8000250:	4313      	orrs	r3, r2
 8000252:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8000254:	e009      	b.n	800026a <DAC_Cmd+0x3a>
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000256:	4908      	ldr	r1, [pc, #32]	; (8000278 <DAC_Cmd+0x48>)
 8000258:	4b07      	ldr	r3, [pc, #28]	; (8000278 <DAC_Cmd+0x48>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	2001      	movs	r0, #1
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	fa00 f303 	lsl.w	r3, r0, r3
 8000264:	43db      	mvns	r3, r3
 8000266:	4013      	ands	r3, r2
 8000268:	600b      	str	r3, [r1, #0]
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40007400 	.word	0x40007400

0800027c <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	460b      	mov	r3, r1
 8000286:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <DAC_SetChannel2Data+0x34>)
 800028e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8000290:	68fa      	ldr	r2, [r7, #12]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4413      	add	r3, r2
 8000296:	3314      	adds	r3, #20
 8000298:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	461a      	mov	r2, r3
 800029e:	887b      	ldrh	r3, [r7, #2]
 80002a0:	6013      	str	r3, [r2, #0]
}
 80002a2:	bf00      	nop
 80002a4:	3714      	adds	r7, #20
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40007400 	.word	0x40007400

080002b4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b087      	sub	sp, #28
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	e076      	b.n	80003be <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002d0:	2201      	movs	r2, #1
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	fa02 f303 	lsl.w	r3, r2, r3
 80002d8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	4013      	ands	r3, r2
 80002e2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002e4:	68fa      	ldr	r2, [r7, #12]
 80002e6:	693b      	ldr	r3, [r7, #16]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d165      	bne.n	80003b8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	2103      	movs	r1, #3
 80002f6:	fa01 f303 	lsl.w	r3, r1, r3
 80002fa:	43db      	mvns	r3, r3
 80002fc:	401a      	ands	r2, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	791b      	ldrb	r3, [r3, #4]
 800030a:	4619      	mov	r1, r3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	431a      	orrs	r2, r3
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	791b      	ldrb	r3, [r3, #4]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d003      	beq.n	800032a <GPIO_Init+0x76>
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	791b      	ldrb	r3, [r3, #4]
 8000326:	2b02      	cmp	r3, #2
 8000328:	d12e      	bne.n	8000388 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	689a      	ldr	r2, [r3, #8]
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	005b      	lsls	r3, r3, #1
 8000332:	2103      	movs	r1, #3
 8000334:	fa01 f303 	lsl.w	r3, r1, r3
 8000338:	43db      	mvns	r3, r3
 800033a:	401a      	ands	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689a      	ldr	r2, [r3, #8]
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	795b      	ldrb	r3, [r3, #5]
 8000348:	4619      	mov	r1, r3
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	431a      	orrs	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	685a      	ldr	r2, [r3, #4]
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	b29b      	uxth	r3, r3
 8000360:	4619      	mov	r1, r3
 8000362:	2301      	movs	r3, #1
 8000364:	408b      	lsls	r3, r1
 8000366:	43db      	mvns	r3, r3
 8000368:	401a      	ands	r2, r3
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	683a      	ldr	r2, [r7, #0]
 8000374:	7992      	ldrb	r2, [r2, #6]
 8000376:	4611      	mov	r1, r2
 8000378:	697a      	ldr	r2, [r7, #20]
 800037a:	b292      	uxth	r2, r2
 800037c:	fa01 f202 	lsl.w	r2, r1, r2
 8000380:	b292      	uxth	r2, r2
 8000382:	431a      	orrs	r2, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	68da      	ldr	r2, [r3, #12]
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	b29b      	uxth	r3, r3
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	2103      	movs	r1, #3
 8000394:	fa01 f303 	lsl.w	r3, r1, r3
 8000398:	43db      	mvns	r3, r3
 800039a:	401a      	ands	r2, r3
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	68da      	ldr	r2, [r3, #12]
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	79db      	ldrb	r3, [r3, #7]
 80003a8:	4619      	mov	r1, r3
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	fa01 f303 	lsl.w	r3, r1, r3
 80003b2:	431a      	orrs	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	3301      	adds	r3, #1
 80003bc:	617b      	str	r3, [r7, #20]
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	2b0f      	cmp	r3, #15
 80003c2:	d985      	bls.n	80002d0 <GPIO_Init+0x1c>
    }
  }
}
 80003c4:	bf00      	nop
 80003c6:	371c      	adds	r7, #28
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	460b      	mov	r3, r1
 80003da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80003dc:	78fb      	ldrb	r3, [r7, #3]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d006      	beq.n	80003f0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80003e2:	490a      	ldr	r1, [pc, #40]	; (800040c <RCC_AHB1PeriphClockCmd+0x3c>)
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <RCC_AHB1PeriphClockCmd+0x3c>)
 80003e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80003ee:	e006      	b.n	80003fe <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80003f0:	4906      	ldr	r1, [pc, #24]	; (800040c <RCC_AHB1PeriphClockCmd+0x3c>)
 80003f2:	4b06      	ldr	r3, [pc, #24]	; (800040c <RCC_AHB1PeriphClockCmd+0x3c>)
 80003f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	43db      	mvns	r3, r3
 80003fa:	4013      	ands	r3, r2
 80003fc:	630b      	str	r3, [r1, #48]	; 0x30
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40023800 	.word	0x40023800

08000410 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	460b      	mov	r3, r1
 800041a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800041c:	78fb      	ldrb	r3, [r7, #3]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d006      	beq.n	8000430 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000422:	490a      	ldr	r1, [pc, #40]	; (800044c <RCC_APB1PeriphClockCmd+0x3c>)
 8000424:	4b09      	ldr	r3, [pc, #36]	; (800044c <RCC_APB1PeriphClockCmd+0x3c>)
 8000426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4313      	orrs	r3, r2
 800042c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800042e:	e006      	b.n	800043e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000430:	4906      	ldr	r1, [pc, #24]	; (800044c <RCC_APB1PeriphClockCmd+0x3c>)
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <RCC_APB1PeriphClockCmd+0x3c>)
 8000434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	43db      	mvns	r3, r3
 800043a:	4013      	ands	r3, r2
 800043c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40023800 	.word	0x40023800

08000450 <gpioConfig>:
#include "stm32f4xx.h"
#include "stm32f4xx_dac.h"
void gpioConfig(){
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIOInitStructure;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8000456:	2101      	movs	r1, #1
 8000458:	2001      	movs	r0, #1
 800045a:	f7ff ffb9 	bl	80003d0 <RCC_AHB1PeriphClockCmd>

	GPIOInitStructure.GPIO_Mode=GPIO_Mode_AN;
 800045e:	2303      	movs	r3, #3
 8000460:	713b      	strb	r3, [r7, #4]
	GPIOInitStructure.GPIO_OType=GPIO_OType_PP;
 8000462:	2300      	movs	r3, #0
 8000464:	71bb      	strb	r3, [r7, #6]
	GPIOInitStructure.GPIO_Pin=GPIO_Pin_5;
 8000466:	2320      	movs	r3, #32
 8000468:	603b      	str	r3, [r7, #0]
	GPIOInitStructure.GPIO_PuPd=GPIO_PuPd_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	71fb      	strb	r3, [r7, #7]
	GPIOInitStructure.GPIO_Speed=GPIO_Speed_100MHz;
 800046e:	2303      	movs	r3, #3
 8000470:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOA,&GPIOInitStructure);
 8000472:	463b      	mov	r3, r7
 8000474:	4619      	mov	r1, r3
 8000476:	4803      	ldr	r0, [pc, #12]	; (8000484 <gpioConfig+0x34>)
 8000478:	f7ff ff1c 	bl	80002b4 <GPIO_Init>
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40020000 	.word	0x40020000

08000488 <dac2Config>:
void dac2Config(){
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
	DAC_InitTypeDef	DACInitStructure;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC,ENABLE);
 800048e:	2101      	movs	r1, #1
 8000490:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000494:	f7ff ffbc 	bl	8000410 <RCC_APB1PeriphClockCmd>
	DACInitStructure.DAC_LFSRUnmask_TriangleAmplitude=DISABLE;
 8000498:	2300      	movs	r3, #0
 800049a:	60bb      	str	r3, [r7, #8]
	DACInitStructure.DAC_OutputBuffer=ENABLE;
 800049c:	2301      	movs	r3, #1
 800049e:	60fb      	str	r3, [r7, #12]
	DACInitStructure.DAC_Trigger=DAC_Trigger_None;
 80004a0:	2300      	movs	r3, #0
 80004a2:	603b      	str	r3, [r7, #0]
	DACInitStructure.DAC_WaveGeneration=DAC_WaveGeneration_None;
 80004a4:	2300      	movs	r3, #0
 80004a6:	607b      	str	r3, [r7, #4]

	DAC_Init(DAC_Channel_2,&DACInitStructure);
 80004a8:	463b      	mov	r3, r7
 80004aa:	4619      	mov	r1, r3
 80004ac:	2010      	movs	r0, #16
 80004ae:	f7ff fe8b 	bl	80001c8 <DAC_Init>
	DAC_Cmd(DAC_Channel_2,ENABLE);
 80004b2:	2101      	movs	r1, #1
 80004b4:	2010      	movs	r0, #16
 80004b6:	f7ff febb 	bl	8000230 <DAC_Cmd>
}
 80004ba:	bf00      	nop
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <delay>:
void delay(uint32_t time){
 80004c2:	b480      	push	{r7}
 80004c4:	b083      	sub	sp, #12
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
	while(time--);
 80004ca:	bf00      	nop
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	1e5a      	subs	r2, r3, #1
 80004d0:	607a      	str	r2, [r7, #4]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d1fa      	bne.n	80004cc <delay+0xa>
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <main>:

int main(void){
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b082      	sub	sp, #8
 80004e6:	af00      	add	r7, sp, #0
  gpioConfig();
 80004e8:	f7ff ffb2 	bl	8000450 <gpioConfig>
  dac2Config();
 80004ec:	f7ff ffcc 	bl	8000488 <dac2Config>

  while (1){
	  for(int i=0;i<=255;i++){
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	e00c      	b.n	8000510 <main+0x2e>
		  DAC_SetChannel2Data(DAC_Align_8b_R,i);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	4619      	mov	r1, r3
 80004fc:	2008      	movs	r0, #8
 80004fe:	f7ff febd 	bl	800027c <DAC_SetChannel2Data>
		  delay(36000);
 8000502:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8000506:	f7ff ffdc 	bl	80004c2 <delay>
	  for(int i=0;i<=255;i++){
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	3301      	adds	r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2bff      	cmp	r3, #255	; 0xff
 8000514:	ddef      	ble.n	80004f6 <main+0x14>

	  }
	  for(int i=254;i<0;i--){
 8000516:	23fe      	movs	r3, #254	; 0xfe
 8000518:	603b      	str	r3, [r7, #0]
 800051a:	e00c      	b.n	8000536 <main+0x54>
		  DAC_SetChannel2Data(DAC_Align_8b_R,i);
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	b29b      	uxth	r3, r3
 8000520:	4619      	mov	r1, r3
 8000522:	2008      	movs	r0, #8
 8000524:	f7ff feaa 	bl	800027c <DAC_SetChannel2Data>
		  delay(36000);
 8000528:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 800052c:	f7ff ffc9 	bl	80004c2 <delay>
	  for(int i=254;i<0;i--){
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	3b01      	subs	r3, #1
 8000534:	603b      	str	r3, [r7, #0]
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	dbef      	blt.n	800051c <main+0x3a>
	  for(int i=0;i<=255;i++){
 800053c:	e7d8      	b.n	80004f0 <main+0xe>
	...

08000540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000578 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000544:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000546:	e003      	b.n	8000550 <LoopCopyDataInit>

08000548 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800054a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800054c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800054e:	3104      	adds	r1, #4

08000550 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000550:	480b      	ldr	r0, [pc, #44]	; (8000580 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000554:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000556:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000558:	d3f6      	bcc.n	8000548 <CopyDataInit>
  ldr  r2, =_sbss
 800055a:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800055c:	e002      	b.n	8000564 <LoopFillZerobss>

0800055e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800055e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000560:	f842 3b04 	str.w	r3, [r2], #4

08000564 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000566:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000568:	d3f9      	bcc.n	800055e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800056a:	f000 f841 	bl	80005f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800056e:	f000 f8f1 	bl	8000754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000572:	f7ff ffb6 	bl	80004e2 <main>
  bx  lr    
 8000576:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000578:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800057c:	080007bc 	.word	0x080007bc
  ldr  r0, =_sdata
 8000580:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000584:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000588:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 800058c:	2000001c 	.word	0x2000001c

08000590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000590:	e7fe      	b.n	8000590 <ADC_IRQHandler>

08000592 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <HardFault_Handler+0x4>

080005a6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80005aa:	e7fe      	b.n	80005aa <MemManage_Handler+0x4>

080005ac <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <BusFault_Handler+0x4>

080005b2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <UsageFault_Handler+0x4>

080005b8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005f4:	4a16      	ldr	r2, [pc, #88]	; (8000650 <SystemInit+0x60>)
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <SystemInit+0x60>)
 80005f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000604:	4a13      	ldr	r2, [pc, #76]	; (8000654 <SystemInit+0x64>)
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <SystemInit+0x64>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b10      	ldr	r3, [pc, #64]	; (8000654 <SystemInit+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000616:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <SystemInit+0x64>)
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <SystemInit+0x64>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000624:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <SystemInit+0x64>)
 8000628:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <SystemInit+0x68>)
 800062a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800062c:	4a09      	ldr	r2, [pc, #36]	; (8000654 <SystemInit+0x64>)
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <SystemInit+0x64>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000636:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <SystemInit+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800063e:	f000 f80d 	bl	800065c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000642:	4b03      	ldr	r3, [pc, #12]	; (8000650 <SystemInit+0x60>)
 8000644:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000648:	609a      	str	r2, [r3, #8]
#endif
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00
 8000654:	40023800 	.word	0x40023800
 8000658:	24003010 	.word	0x24003010

0800065c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800066a:	4a36      	ldr	r2, [pc, #216]	; (8000744 <SetSysClock+0xe8>)
 800066c:	4b35      	ldr	r3, [pc, #212]	; (8000744 <SetSysClock+0xe8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000674:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000676:	4b33      	ldr	r3, [pc, #204]	; (8000744 <SetSysClock+0xe8>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800067e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3301      	adds	r3, #1
 8000684:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d103      	bne.n	8000694 <SetSysClock+0x38>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000692:	d1f0      	bne.n	8000676 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <SetSysClock+0xe8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80006a0:	2301      	movs	r3, #1
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	e001      	b.n	80006aa <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d142      	bne.n	8000736 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80006b0:	4a24      	ldr	r2, [pc, #144]	; (8000744 <SetSysClock+0xe8>)
 80006b2:	4b24      	ldr	r3, [pc, #144]	; (8000744 <SetSysClock+0xe8>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80006bc:	4a22      	ldr	r2, [pc, #136]	; (8000748 <SetSysClock+0xec>)
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SetSysClock+0xec>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80006c8:	4a1e      	ldr	r2, [pc, #120]	; (8000744 <SetSysClock+0xe8>)
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <SetSysClock+0xe8>)
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80006d0:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <SetSysClock+0xe8>)
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <SetSysClock+0xe8>)
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006da:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80006dc:	4a19      	ldr	r2, [pc, #100]	; (8000744 <SetSysClock+0xe8>)
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <SetSysClock+0xe8>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80006e6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <SetSysClock+0xe8>)
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <SetSysClock+0xf0>)
 80006ec:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80006ee:	4a15      	ldr	r2, [pc, #84]	; (8000744 <SetSysClock+0xe8>)
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <SetSysClock+0xe8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006f8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006fa:	bf00      	nop
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <SetSysClock+0xe8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0f9      	beq.n	80006fc <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <SetSysClock+0xf4>)
 800070a:	f240 7205 	movw	r2, #1797	; 0x705
 800070e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000710:	4a0c      	ldr	r2, [pc, #48]	; (8000744 <SetSysClock+0xe8>)
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <SetSysClock+0xe8>)
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	f023 0303 	bic.w	r3, r3, #3
 800071a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800071c:	4a09      	ldr	r2, [pc, #36]	; (8000744 <SetSysClock+0xe8>)
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <SetSysClock+0xe8>)
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	f043 0302 	orr.w	r3, r3, #2
 8000726:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000728:	bf00      	nop
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <SetSysClock+0xe8>)
 800072c:	689b      	ldr	r3, [r3, #8]
 800072e:	f003 030c 	and.w	r3, r3, #12
 8000732:	2b08      	cmp	r3, #8
 8000734:	d1f9      	bne.n	800072a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000
 800074c:	07405419 	.word	0x07405419
 8000750:	40023c00 	.word	0x40023c00

08000754 <__libc_init_array>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	4e0d      	ldr	r6, [pc, #52]	; (800078c <__libc_init_array+0x38>)
 8000758:	4c0d      	ldr	r4, [pc, #52]	; (8000790 <__libc_init_array+0x3c>)
 800075a:	1ba4      	subs	r4, r4, r6
 800075c:	10a4      	asrs	r4, r4, #2
 800075e:	2500      	movs	r5, #0
 8000760:	42a5      	cmp	r5, r4
 8000762:	d109      	bne.n	8000778 <__libc_init_array+0x24>
 8000764:	4e0b      	ldr	r6, [pc, #44]	; (8000794 <__libc_init_array+0x40>)
 8000766:	4c0c      	ldr	r4, [pc, #48]	; (8000798 <__libc_init_array+0x44>)
 8000768:	f000 f818 	bl	800079c <_init>
 800076c:	1ba4      	subs	r4, r4, r6
 800076e:	10a4      	asrs	r4, r4, #2
 8000770:	2500      	movs	r5, #0
 8000772:	42a5      	cmp	r5, r4
 8000774:	d105      	bne.n	8000782 <__libc_init_array+0x2e>
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800077c:	4798      	blx	r3
 800077e:	3501      	adds	r5, #1
 8000780:	e7ee      	b.n	8000760 <__libc_init_array+0xc>
 8000782:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000786:	4798      	blx	r3
 8000788:	3501      	adds	r5, #1
 800078a:	e7f2      	b.n	8000772 <__libc_init_array+0x1e>
 800078c:	080007b4 	.word	0x080007b4
 8000790:	080007b4 	.word	0x080007b4
 8000794:	080007b4 	.word	0x080007b4
 8000798:	080007b8 	.word	0x080007b8

0800079c <_init>:
 800079c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800079e:	bf00      	nop
 80007a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007a2:	bc08      	pop	{r3}
 80007a4:	469e      	mov	lr, r3
 80007a6:	4770      	bx	lr

080007a8 <_fini>:
 80007a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007aa:	bf00      	nop
 80007ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ae:	bc08      	pop	{r3}
 80007b0:	469e      	mov	lr, r3
 80007b2:	4770      	bx	lr
